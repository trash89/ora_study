-- multitenant databases (cdb1)

--- on the primary (o19cs)

-- verify if TDE is in place for the source database
sqlplus / as sysdba<<END
@show_tde19
END
v$encryption_wallet
Con STATUS			   WRL_TYPE		WALLET_TYPE	     W order   Backuped  Mode	  WRL_PARAMETER
--- ------------------------------ -------------------- -------------------- --------- --------- -------- --------------------------------------------------------------------------------
  1 OPEN			   FILE 		AUTOLOGIN	     SINGLE    NO	 NONE	  /u01/app/oracle/admin/cdb1/encryption_keystore/tde/
  2 OPEN			   FILE 		AUTOLOGIN	     SINGLE    NO	 UNITED
  3 OPEN			   FILE 		AUTOLOGIN	     SINGLE    NO	 UNITED

v$encryption_keys
Con KEY_ID								   TAG				  USER				 KEY_USE    KEYSTORE_TYPE     BACKED_UP
--- ---------------------------------------------------------------------- ------------------------------ ------------------------------ ---------- ----------------- ---------
  1 Ab5wfxejck9Rv5TUwdTHmzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA		   first master key cdb 	  SYS				 TDE IN PDB SOFTWARE KEYSTORE NO
  3 ASyEEvbet08Lvzqdjqkl6GsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA		   first master key cdb 	  SYS				 TDE IN PDB SOFTWARE KEYSTORE NO

Creation Time	    Activation Time	Creator:DBNAME/PDBNAME				   Activating:DBNAME/PDBNAME
------------------- ------------------- -------------------------------------------------- --------------------------------------------------
07/03/2025 07:07:40 07/03/2025 07:07:41 CDB1/CDB$ROOT					   CDB1/CDB$ROOT
07/03/2025 07:07:41 07/03/2025 07:07:41 CDB1/PDB1					   CDB1/PDB1

2 rows selected.


sys.x$kcbdbk, if mkloc == 0, no encryption enabled
Con	 MKLOC
--- ----------
  1	     1
  2	     0
  3	     1

-- remove local listener and set db_unique_name
sqlplus / as sysdba <<END
alter system reset local_listener scope=both;
alter system set db_unique_name='CDB1' scope=spfile;
alter user sys identified by "manager123*";
alter user system identified by "manager123*";
END

-- Archivelog mode
sqlplus / as sysdba

shutdown immediate;
startup mount;
alter database archivelog;
recover until cancel;
alter database open resetlogs;


-- Force logging
alter database force logging;

-- Add supplemental log data
alter database add supplemental log data (primary key,unique,foreign key,all) columns;

-- Make sure at least one logfile is present
alter system switch logfile;
alter system switch logfile;
alter system switch logfile;
alter system switch logfile;

-- Standby redo log
@logfile
-- 3 redo log groups, we should create 3+1=4 standby logfile groups
alter database add standby logfile group 11 ('/u02/oradata/CDB1/standby_redo11.log') size 200m;
alter database add standby logfile group 12 ('/u02/oradata/CDB1/standby_redo12.log') size 200m;
alter database add standby logfile group 13 ('/u02/oradata/CDB1/standby_redo13.log') size 200m;
alter database add standby logfile group 14 ('/u02/oradata/CDB1/standby_redo14.log') size 200m;
@logfile

-- FRA
alter system set db_recovery_file_dest_size=30g scope=both;
alter system set db_recovery_file_dest='/u01/app/oracle/recovery_area' scope=both;

-- Flashback on
alter database flashback on;

-- Block change tracking - optional
alter database enable block change tracking;


-- Set remote archivelog destinations
-- ALTER SYSTEM SET LOG_ARCHIVE_DEST_2='SERVICE=cdb1_stby NOAFFIRM ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=cdb1_stby';
-- ALTER SYSTEM SET LOG_ARCHIVE_DEST_STATE_2=ENABLE;
alter system reset LOG_ARCHIVE_DEST_2 scope=both;
alter system reset LOG_ARCHIVE_DEST_STATE_2 scope=both;

-- Standby file management
ALTER SYSTEM SET STANDBY_FILE_MANAGEMENT=AUTO;

-- tnsnames.ora on both servers
vi $ORACLE_HOME/network/admin/tnsnames.ora

CDB1 =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = o19cs)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SID = cdb1)
    )
  )

CDB1_STBY =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = o19cs2)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SID = cdb1)
    )
  )

-- listener.ora on the primary server (o19cs)
vi $ORACLE_HOME/network/admin/listener.ora

LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = o19cs)(PORT = 1521))
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))      
    )
  )

SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
      (GLOBAL_DBNAME = CDB1)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = cdb1)
      (ENVS="TNS_ADMIN=$ORACLE_HOME/network/admin")
    )
    (SID_DESC =
      (GLOBAL_DBNAME = CDB1_DGMGRL)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = cdb1)
      (ENVS="TNS_ADMIN=$ORACLE_HOME/network/admin")
    )
    (SID_DESC =
      (GLOBAL_DBNAME = ORCL)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = ORCL)
      (ENVS="TNS_ADMIN=$ORACLE_HOME/network/admin")
    )
  )

ADR_BASE_LISTENER = /u01/app/oracle

-- listener.ora on the STANDBY server (o19cs2)
vi $ORACLE_HOME/network/admin/listener.ora

LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = o19cs2)(PORT = 1521))    
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
  )
SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
      (GLOBAL_DBNAME = CDB1_STBY)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = cdb1)
      (ENVS="TNS_ADMIN=$ORACLE_HOME/network/admin")
    )
    (SID_DESC =
      (GLOBAL_DBNAME = CDB1_STBY_DGMGRL)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = cdb1)
      (ENVS="TNS_ADMIN=$ORACLE_HOME/network/admin")
    )
    (SID_DESC =
      (GLOBAL_DBNAME = ORCL)
      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)
      (SID_NAME = ORCL)
      (ENVS="TNS_ADMIN=$ORACLE_HOME/network/admin")
    )
  )

ADR_BASE_LISTENER = /u01/app/oracle

-- Restart listener on both servers
lsnrctl stop
lsnrctl start



-- on the standby server (o19cs2):

-- Cleanup the od database
cd $ORACLE_HOME/scripts
./stop_all.sh

-- remove old database
rm -rf /u01/app/oracle/admin/cdb1/*
rm -rf /u01/app/oracle/admin/CDB1/*
rm -rf /u01/app/oracle/audit/cdb1/*
rm -rf /u01/app/oracle/audit/CDB1/*
rm -rf /u01/app/oracle/diag/rdbms/cdb1/*
rm -rf /u01/app/oracle/recovery_area/cdb1/*
rm -rf /u01/app/oracle/recovery_area/CDB1/*
rm -rf /u02/oradata/cdb1/*
rm -rf /u02/oradata/CDB1/*
rm -f $ORACLE_HOME/dbs/lkCDB1
rm -f $ORACLE_HOME/dbs/orapwcdb1
rm -f $ORACLE_HOME/dbs/initcdb1.ora
rm -f $ORACLE_HOME/dbs/snapcf_cdb1.f
rm -f $ORACLE_HOME/dbs/spfilecdb1.ora
rm -f $ORACLE_HOME/dbs/hc_cdb1.dat
rm -f $ORACLE_HOME/rdbms/log/*cdb1*
rmdir /u01/app/oracle/admin/cdb1
rmdir /u01/app/oracle/admin/CDB1
rmdir /u01/app/oracle/audit/cdb1
rmdir /u01/app/oracle/audit/CDB1
rmdir /u01/app/oracle/diag/rdbms/cdb1
rmdir /u01/app/oracle/recovery_area/cdb1
rmdir /u01/app/oracle/recovery_area/CDB1
rmdir /u02/oradata/cdb1
rmdir /u02/oradata/CDB1

-- re-create the folders for the database cdb1_stby
mkdir -p /u01/app/oracle/admin/cdb1_stby/adump
mkdir -p /u01/app/oracle/admin/CDB1_STBY/adump
mkdir -p /u01/app/oracle/admin/cdb1_stby/wallet
mkdir -p /u01/app/oracle/admin/CDB1_STBY/wallet
mkdir -p /u01/app/oracle/admin/cdb1_stby/xdb_wallet
mkdir -p /u01/app/oracle/admin/CDB1_STBY/xdb_wallet
mkdir -p /u01/app/oracle/admin/cdb1_stby/encryption_keystore/tde/
mkdir -p /u01/app/oracle/audit/cdb1_stby
mkdir -p /u01/app/oracle/audit/CDB1_STBY
mkdir -p /u01/app/oracle/diag/rdbms/cdb1_stby/cdb1_stby
mkdir -p /u01/app/oracle/diag/rdbms/cdb1_stby/CDB1_STBY
mkdir -p /u01/app/oracle/recovery_area/cdb1_stby/flashback
mkdir -p /u01/app/oracle/recovery_area/CDB1_STBY/flashback
mkdir -p /u02/oradata/CDB1_STBY/pdb1
mkdir -p /u02/oradata/cdb1_stby/pdb1
mkdir -p /u02/oradata/cdb1_stby/changetracking
mkdir -p /u02/oradata/CDB1_STBY/changetracking

-- re-create the folder for the audit with the name of the original database to be cloned
mkdir -p /u01/app/oracle/admin/cdb1/adump
mkdir -p /u01/app/oracle/admin/CDB1/adump


-- transfer the TDE keys

scp oracle@o19cs:/u01/app/oracle/admin/cdb1/wallet/* oracle@o19cs2:/u01/app/oracle/admin/cdb1_stby/wallet

scp oracle@o19cs:/u01/app/oracle/admin/cdb1/xdb_wallet/* oracle@o19cs2:/u01/app/oracle/admin/cdb1_stby/xdb_wallet

scp oracle@o19cs:/u01/app/oracle/admin/cdb1/encryption_keystore/tde/* oracle@o19cs2:/u01/app/oracle/admin/cdb1_stby/encryption_keystore/tde/

-- Create a password file
orapwd file=$ORACLE_HOME/dbs/orapwcdb1 format=12.2 password=manager123*

-- Create an init.ora file
echo "*.db_name='cdb1'"        >/tmp/initcdb1_stby.ora
echo "*.compatible='19.3.0'"  >>/tmp/initcdb1_stby.ora

-- Start the auxiliary instance
export ORACLE_SID=cdb1
sqlplus / as sysdba <<END
startup nomount pfile='/tmp/initcdb1_stby.ora';
END


-- Connect to RMAN, specifying a full connect string for both the TARGET and AUXILIARY instances. Do not attempt to use OS authentication.
-- Duplicate for standby
rman TARGET sys/manager123*@CDB1 AUXILIARY sys/manager123*@CDB1_STBY <<END
run{
ALLOCATE CHANNEL tgt1 TYPE DISK; 
ALLOCATE CHANNEL tgt2 TYPE DISK; 
ALLOCATE CHANNEL tgt3 TYPE DISK; 
ALLOCATE CHANNEL tgt4 TYPE DISK; 
ALLOCATE AUXILIARY CHANNEL dup1 TYPE DISK;
ALLOCATE AUXILIARY CHANNEL dup2 TYPE DISK;
ALLOCATE AUXILIARY CHANNEL dup3 TYPE DISK;
ALLOCATE AUXILIARY CHANNEL dup4 TYPE DISK;
DUPLICATE TARGET DATABASE
FOR STANDBY
FROM ACTIVE DATABASE
DORECOVER
SPFILE
parameter_value_convert=
  '/u01/app/oracle/admin/CDB1/','/u01/app/oracle/admin/cdb1_stby/',
  '/u01/app/oracle/admin/cdb1/','/u01/app/oracle/admin/cdb1_stby/',
  '/u02/oradata/CDB1/','/u02/oradata/cdb1_stby/',
  '/u01/app/oracle/recovery_area/CDB1/','/u01/app/oracle/recovery_area/cdb1_stby/'  
  '/u01/app/oracle/recovery_area/cdb1/','/u01/app/oracle/recovery_area/cdb1_stby/'  
SET db_unique_name='cdb1_stby' COMMENT 'Is standby'
SET db_file_name_convert=
  '/u02/oradata/CDB1/','/u02/oradata/cdb1_stby/',
  '/u01/app/oracle/recovery_area/CDB1/','/u01/app/oracle/recovery_area/cdb1_stby/',
  '/u01/app/oracle/recovery_area/cdb1/','/u01/app/oracle/recovery_area/cdb1_stby/',
  '/u02/oradata/CDB1/','/u02/oradata/cdb1_stby/'
SET log_file_name_convert=
  '/u02/oradata/CDB1/','/u02/oradata/cdb1_stby/'
SET job_queue_processes='0'
USING COMPRESSED BACKUPSET
SECTION SIZE 1G
NOFILENAMECHECK;
}
END

-- enable flashback and block change tracking
sqlplus / as sysdba << END
alter database disable block change tracking;
alter database enable block change tracking;
alter database flashback off;
alter database flashback on;
END

-- Enable Broker on both databases
sqlplus / as sysdba << END
ALTER SYSTEM SET dg_broker_start=true;
END

-- On the primary server, issue the following command to register the primary server with the broker.
dgmgrl sys/manager123*@CDB1
DGMGRL> CREATE CONFIGURATION my_dg_config AS PRIMARY DATABASE IS CDB1 CONNECT IDENTIFIER IS CDB1;

-- Now add the standby database
DGMGRL> ADD DATABASE CDB1_STBY AS CONNECT IDENTIFIER IS CDB1_STBY;

-- Now enable the configuration
DGMGRL> ENABLE CONFIGURATION;

-- The following commands show how to check the configuration and status of the databases FROM the broker.
DGMGRL> show configuration;
DGMGRL> SHOW DATABASE CDB1;
DGMGRL> SHOW DATABASE CDB1_STBY;

-- validate database
DGMGRL> validate database verbose CDB1;
DGMGRL> validate database verbose CDB1_STBY;

-- export DG Broker configuration
-- the file is in the trace directory /u01/app/oracle/diag/rdbms/cdb1/cdb1/trace
DGMGRL> EXPORT CONFIGURATION TO 'dg_config.txt';
ls -lrt /u01/app/oracle/diag/rdbms/cdb1/cdb1/trace/dg_config.txt

-- the recommended configuration for archived log maintenance - execute on primary only
rman target=/ <<END
CONFIGURE BACKUP OPTIMIZATION ON;
CONFIGURE CONTROLFILE AUTOBACKUP ON;
CONFIGURE ARCHIVELOG DELETION POLICY TO BACKED UP 1 TIMES TO DISK;
CONFIGURE ENCRYPTION FOR DATABASE ON;
CONFIGURE ENCRYPTION ALGORITHM 'AES256';
END


-- Database Switchover
Connect to the primary database (cdb1) and switchover to the standby database (cdb1_stby).

dgmgrl sys/manager123*@cdb1
DGMGRL> SWITCHOVER TO cdb1_stby;


-- Switch back to the original primary. Connect to the new primary (cdb1_stby) and switchover to the new standby database (cdb1).

dgmgrl sys/manager123*@cdb1_stby
DGMGRL> SWITCHOVER TO cdb1;


-- Database Failover
-- If the primary database is not available the standby database can be activated as a primary database using the following statements. 
--  Connect to the standby database (cdb1_stby) and failover.

dgmgrl sys/manager123*@cdb1_stby
DGMGRL> FAILOVER TO cdb1_stby;

-- The original primary database can now be configured as a standby. 
If flashback database was enabled on the primary database, then this can be done relatively easily with the following command.

DGMGRL> REINSTATE DATABASE cdb1;


----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- if the redo transport is broken, we should reconfigure cdb1 as a standby FROM cdb1_stby
sqlplus / as sysdba
shutdown abort
exit

-- Remove files and folders
rm -rf /u02/oradata/CDB1/*
rm -rf /u02/oradata/cdb1/*
rm -rf /u01/app/oracle/flash_recovery_area/CDB1/*
rm -rf /u01/app/oracle/flash_recovery_area/cdb1/*
rm -rf /u01/app/oracle/audit/CDB1/*
rm -rf /u01/app/oracle/audit/cdb1/*
rm -rf /u01/app/oracle/admin/CDB1/adump/*
rm -rf /u01/app/oracle/admin/cdb1/adump/*
rm -rf /u01/app/oracle/admin/CDB1/dpdump/*
rm -rf /u01/app/oracle/admin/cdb1/dpdump/*
rm -f $ORACLE_HOME/dbs/*CDB1*
rm -f $ORACLE_HOME/dbs/*cdb1*

-- Create an init.ora file
echo "*.db_name='cdb1'">/tmp/initcdb1_stby.ora
echo "*.compatible='19.3.0'">>/tmp/initcdb1_stby.ora

-- Create a password file
orapwd file=$ORACLE_HOME/dbs/orapwcdb1 password=manager123* entries=10

-- Start the auxiliary instance
export ORACLE_SID=cdb1
sqlplus / as sysdba
startup nomount pfile='/tmp/initcdb1_stby.ora';
exit;

-- Duplicate database
rman TARGET sys/manager123*@cdb1_stby AUXILIARY sys/manager@cdb1 <<END
run{
ALLOCATE CHANNEL tgt1 TYPE DISK; 
ALLOCATE CHANNEL tgt2 TYPE DISK; 
ALLOCATE CHANNEL tgt3 TYPE DISK; 
ALLOCATE CHANNEL tgt4 TYPE DISK; 
ALLOCATE AUXILIARY CHANNEL dup1 TYPE DISK;
ALLOCATE AUXILIARY CHANNEL dup2 TYPE DISK;
ALLOCATE AUXILIARY CHANNEL dup3 TYPE DISK;
ALLOCATE AUXILIARY CHANNEL dup4 TYPE DISK;
DUPLICATE TARGET DATABASE
FOR STANDBY
FROM ACTIVE DATABASE
DORECOVER
SPFILE
parameter_value_convert=
  '/u01/app/oracle/admin/cdb1_stby/','/u01/app/oracle/admin/cdb1/',
  '/u01/app/oracle/fast_recovery_area/cdb1_stby/','/u01/app/oracle/fast_recovery_area/cdb1/',
  '/u02/oradata/cdb1_stby/','/u02/oradata/cdb1/'
SET db_unique_name='cdb1' COMMENT 'Is standby'
SET db_file_name_convert=
  '/u01/app/oracle/fast_recovery_area/cdb1_stby/','/u01/app/oracle/fast_recovery_area/cdb1/',
  '/u02/oradata/cdb1_stby/','/u02/oradata/cdb1/',
  '/u02/oradata/CDB1_STBY/','/u02/oradata/CDB1/'
SET log_file_name_convert=
  '/u02/oradata/cdb1_stby/','/u02/oradata/cdb1/'
SET job_queue_processes='0'
USING COMPRESSED BACKUPSET
SECTION SIZE 1G
NOFILENAMECHECK;
}
END

-- Enable database
dgmgrl sys/manager123*@cdb1_stby
DGMGRL> ENABLE DATABASE cdb1;
DGMGRL> ENABLE configuration;
DGMGRL> show database cdb1;
DGMGRL> switchover to cdb1;

-- Re-create the configuration
CREATE CONFIGURATION my_dg_config AS PRIMARY DATABASE IS CDB1_STBY CONNECT IDENTIFIER IS CDB1_STBY;
ADD DATABASE CDB1 AS CONNECT IDENTIFIER IS CDB1;
----------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Stop Redo Apply.
To stop the MRP, issue the following command:
ALTER DATABASE RECOVER MANAGED STANDBY DATABASE CANCEL;

-- Start Redo Apply in the background.
In order to start the Redo Apply service in the background, use the disconnect FROM session option. 
This command will return you to the SQL command line once the Redo Apply service is started. 
Run the following statement on the standby database:
-- in v$managed_standby, process MRP0 is in status WAIT_FOR_LOG
SQL> alter database recover managed standby database disconnect FROM session;


-- Redo-apply in Real-Time apply mode
-- in v$managed_standby, process MRP0 is in status APPLYING_LOG
SQL> ALTER DATABASE RECOVER MANAGED STANDBY DATABASE USING CURRENT LOGFILE DISCONNECT FROM SESSION;


-- Read-Only Standby and Active Data Guard
In 11g, Oracle introduced the Active Data Guard feature. This allows the standby database to be open in read-only mode, but still apply redo information. 
This means a standby can be available for querying, yet still be up to date. There are licensing implications for this feature, 
but the following commands show how active data guard can be enabled.

-- in v$managed_standby, process MRP0 is in status WAIT_FOR_LOG
alter database close;
ALTER DATABASE OPEN READ ONLY;
ALTER DATABASE RECOVER MANAGED STANDBY DATABASE DISCONNECT FROM SESSION;
alter pluggable database pdb1 open read only;

-- Active Data Guard in Real-Time apply mode
-- in v$managed_standby, process MRP0 is in status APPLYING_LOG
alter database close;
ALTER DATABASE OPEN READ ONLY;
ALTER DATABASE RECOVER MANAGED STANDBY DATABASE USING CURRENT LOGFILE DISCONNECT FROM SESSION;
alter pluggable database pdb1 open read only;

-- Test the TDE
o19cs2:PDB1:cdb1_stby:SYS
SQL> SELECT * FROM test.tde_test;

	ID DATA
---------- --------------------------------------------------
	 1 This is a secret!


-- Snapshot Standby
-- Introduced in 11g, snapshot standby allows the standby database to be opened in read-write mode. When switched back into standby mode, 
-- all changes made whilst in read-write mode are lost. This is achieved using flashback database, but the standby database does not need to have 
-- flashback database explicitly enabled to take advantage of this feature, thought it works just the same if it is.

-- Connect to the primary (cdb1) database and convert the standby database (cdb1_stby) to a snapshot standby.
dgmgrl sys/manager123*@cdb1
DGMGRL> CONVERT DATABASE cdb1_stby TO SNAPSHOT STANDBY;

SELECT name,restore_point_time FROM v$restore_point;

-- When you are finished with the snapshot standby, convert it back to a standby database.
dgmgrl sys/manager123*@cdb1
DGMGRL> CONVERT DATABASE cdb1_stby TO PHYSICAL STANDBY;

-- Show the database configuration in Broker verbose

DGMGRL> show database verbose cdb1;
DGMGRL> show database verbose cdb1_stby;

-- Changing protection modes
DGMGRL> show configuration;

Configuration - my_dg_config

  Protection Mode: MaxPerformance
  Databases:
    db11g      - Primary database
    db11g_stby - Physical standby database

Fast-Start Failover: DISABLED

Configuration Status:
SUCCESS

DGMGRL> SHOW DATABASE VERBOSE cdb1 LogXptMode;
DGMGRL> SHOW DATABASE VERBOSE cdb1_stby LogXptMode;

DGMGRL> EDIT DATABASE cdb1 SET PROPERTY LOGXPTMODE='SYNC';
DGMGRL> EDIT DATABASE cdb1_stby SET PROPERTY LOGXPTMODE='SYNC';

DGMGRL> EDIT CONFIGURATION SET PROTECTION MODE AS MaxAvailability;

DGMGRL> show configuration;

Configuration - my_dg_config

  Protection Mode: MaxAvailability
  Databases:
    db11g      - Primary database
    db11g_stby - Physical standby database

Fast-Start Failover: DISABLED

Configuration Status:
SUCCESS

-- change back to MaxPerformance
DGMGRL> EDIT CONFIGURATION SET PROTECTION MODE AS MaxPerformance;
DGMGRL> EDIT DATABASE cdb1 SET PROPERTY LOGXPTMODE='ASYNC';
DGMGRL> EDIT DATABASE cdb1_stby SET PROPERTY LOGXPTMODE='ASYNC';
DGMGRL> show configuration;


-- Example property changes
DGMGRL> EDIT DATABASE 'DB11G' SET PROPERTY 'LogArchiveFormat'='log_%t_%s_%r_%d.arc';
DGMGRL> EDIT DATABASE 'DB11G' SET PROPERTY LogXptMode=SYNC;
DGMGRL> EDIT DATABASE 'DB11G' SET PROPERTY LogShipping=OFF;
DGMGRL> EDIT DATABASE 'DB11G' SET PROPERTY NetTimeout=30;
DGMGRL> EDIT DATABASE 'DB11G' SET PROPERTY 'ReopenSecs'=400;
DGMGRL> EDIT DATABASE 'DB11G' SET PROPERTY ArchiveLagTarget=800;
DGMGRL> EDIT DATABASE 'DB11G' SET PROPERTY DelayMins='540';


--- Logical Data Guard

-- on the physical standby, run the script under cdb$root and pdb1:
sqlplus / as sysdba
alter pluggable database pdb1 open read only;
alter session set container=pdb1;
@ldg_prep

-- on the primary, add the missing PK/UK
ALTER TABLE SCOTT.BONUS ADD PRIMARY KEY (ENAME) RELY DISABLE;
ALTER TABLE SCOTT.SALGRADE ADD PRIMARY KEY (GRADE) RELY DISABLE;
ALTER TABLE SCOTT.DUMMY ADD PRIMARY KEY (DUMMY) RELY DISABLE;

ALTER TABLE test.tde_test ADD PRIMARY KEY (id) RELY DISABLE;

-- Optional, on the primary database to prepare the role transition
ALTER SYSTEM SET LOG_ARCHIVE_DEST_1='LOCATION=/u01/app/oracle/flash_recovery_area/DB11G/archive VALID_FOR=(ONLINE_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=DB11G' SCOPE=BOTH;
ALTER SYSTEM SET LOG_ARCHIVE_DEST_3='LOCATION=/u01/app/oracle/flash_recovery_area/DB11G/archive_std VALID_FOR=(STANDBY_LOGFILES,STANDBY_ROLE) DB_UNIQUE_NAME=DB11G' SCOPE=BOTH;
alter system set LOG_ARCHIVE_DEST_STATE_3=ENABLE;

-- disable Data Guard Broker
dgmgrl sys/manager123*@cdb1
disable database cdb1_stby;
disable configuration;
remove configuration;

-- on both databases
sqlplus / as sysdba
ALTER SYSTEM SET DG_BROKER_START=FALSE SCOPE=BOTH;
alter system reset log_archive_config scope=both;


-- on the standby, cancel the recovery
ALTER DATABASE RECOVER MANAGED STANDBY DATABASE CANCEL;

-- on the primary, build the logminer dictionary
EXECUTE DBMS_LOGSTDBY.BUILD;

-- on the standby, execute the recover to the scn of dictionary build
shutdown immediate;
startup mount exclusive;
ALTER DATABASE RECOVER TO LOGICAL STANDBY cdb1;

There are two kinds of archived redo logfiles on the logical standby databases. The first one is created FROM the online redo logs 
and the second is created FROM the standby redo logs. We'll create separate desinaions for these archived logiles using the following query:

ALTER SYSTEM SET LOG_ARCHIVE_DEST_1='LOCATION=/u01/app/oracle/flash_recovery_area/archive VALID_FOR=(ONLINE_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=DB11G_STBY';
ALTER SYSTEM SET LOG_ARCHIVE_DEST_2='SERVICE=DB11G_STBY ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=DB11G_STBY';

ALTER SYSTEM SET LOG_ARCHIVE_DEST_3='LOCATION=/u01/app/oracle/flash_recovery_area/archive_std VALID_FOR=(STANDBY_LOGFILES,STANDBY_ROLE) DB_UNIQUE_NAME="db11g"';

ALTER SYSTEM SET LOG_ARCHIVE_DEST_1='LOCATION=USE_DB_RECOVERY_FILE_DEST';

-- open resetlogs of the logical standby
shutdown immediate;
startup mount;
alter database open resetlogs;
-- enable block change tracking and flashback for the logical standby database
alter database enable block change tracking;
alter database flashback on;


-- start the SQL Apply
alter database start logical standby apply immediate;

-- the recommended configuration for archived log maintenance - execute on logical standby
rman target=/
RMAN> CONFIGURE BACKUP OPTIMIZATION ON;
RMAN> CONFIGURE CONTROLFILE AUTOBACKUP ON;
RMAN> CONFIGURE ARCHIVELOG DELETION POLICY TO BACKED UP 1 TIMES TO DISK;
-- RMAN> CONFIGURE ENCRYPTION FOR DATABASE ON;
-- RMAN> CONFIGURE ENCRYPTION ALGORITHM 'AES256';


-- skip rules on a logical standby database
-- stop the logical standby
ALTER DATABASE STOP LOGICAL STANDBY APPLY;
-- apply the rules
alter session set container=pdb1;
EXECUTE DBMS_LOGSTDBY.SKIP(STMT => 'DML', SCHEMA_NAME =>'SCOTT', OBJECT_NAME => 'TEST_LOB');
EXECUTE DBMS_LOGSTDBY.SKIP(STMT => 'SCHEMA_DDL',SCHEMA_NAME => 'SCOTT', OBJECT_NAME => 'TEST_LOB');
EXECUTE DBMS_LOGSTDBY.SKIP(STMT => 'DML', SCHEMA_NAME =>'HR', OBJECT_NAME => '%');
EXECUTE DBMS_LOGSTDBY.SKIP(STMT => 'DIRECTORY');

-- restart the SQL Apply
alter session set container=cdb$root;
alter database start logical standby apply immediate;
